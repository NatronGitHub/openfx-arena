sudo: required
dist: trusty

language: cpp

compiler:
  - gcc

before_install:
  - env
  - df
  - date -u
  - uname -a
  - export J='-j3'
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then
      echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca- ;
    fi
  - git submodule update --init --recursive
  - if [ ${TRAVIS_OS_NAME} = "linux" -a "$CC" = "gcc" ];
    then
        if [ "$BUILDDOC" = 1 ]; then
            sudo apt-get install doxygen xsltproc;
        fi;
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
        sudo apt-get update;
        sudo apt-get install gcc-8 g++-8;
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 90;
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 90;
    fi
  - sudo apt remove --purge imagemagick imagemagick-common
  - sudo add-apt-repository -y ppa:george-edison55/cmake-3.x
  - sudo add-apt-repository -y ppa:libreoffice/ppa
  #- sudo add-apt-repository -y ppa:kubuntu-ppa/backports
  - sudo add-apt-repository -y ppa:jonathonf/inkscape
  - sudo apt-get update
  - sudo apt-get install -y cmake libfreetype6-dev libfontconfig1-dev libpango1.0-dev librsvg2-dev liblcms2-dev libzip-dev libcdr-dev libicu-dev libcppunit-dev libopencolorio-dev librevenge-dev libboost-all-dev gtk-doc-tools libharfbuzz-dev libselinux1-dev libpoppler-glib-dev libcurl4-openssl-dev

# ppa:jonathonf/inkscape brings librevenge & libcdr for trusty
install:
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]];
    then
        exit 0;
    fi
  - sudo rm -rf /usr/include/libcdr* /usr/lib*/*cdr* /usr/lib*/pkgconfig/*cdr*
  - git clone https://github.com/LibreOffice/libcdr
  - cd libcdr
  - sh autogen.sh
  - ./configure --prefix=/usr
  - make -j2
  - sudo make install
  - cd ..
  - git clone https://github.com/ImageMagick/ImageMagick
  - cd ImageMagick
  - git checkout tags/7.0.8-52
  - ./configure --prefix=/usr --disable-docs --disable-deprecated --with-magick-plus-plus=yes --with-quantum-depth=32 --without-dps --without-djvu --without-fftw --without-fpx --without-gslib --without-gvc --without-jbig --without-jpeg --with-lcms --without-openjp2 --without-lqr --without-lzma --without-openexr --without-pango --with-png --without-rsvg --without-tiff --without-webp --without-xml --with-zlib --without-bzlib --enable-static --enable-shared --enable-hdri --with-freetype --with-fontconfig --without-x --without-modules --without-wmf
  - make -j2
  - sudo make install
  - cd ..
  - wget https://www.freedesktop.org/software/harfbuzz/release/harfbuzz-0.9.42.tar.bz2
  - tar xf harfbuzz-0.9.42.tar.bz2
  - cd harfbuzz-0.9.42
  - ./configure --prefix=/usr/local
  - make -j2
  - sudo make install
  - cd ..
  - wget http://ftp.gnome.org/pub/GNOME/sources/pango/1.38/pango-1.38.1.tar.xz
  - tar xf pango-1.38.1.tar.xz
  - cd pango-1.38.1
  - env PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LD_LIBRARY_PATH=/usr/local/lib ./configure --prefix=/usr/local
  - make -j2
  - sudo make install
  - cd ..

script:
  - git submodule update -i --recursive
  - PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LD_LIBRARY_PATH=/usr/local/lib make IM=7 CONFIG=debug
  - cd ..
  - mkdir -p openfx-arena-build
  - cd openfx-arena-build
  - PKG_CONFIG_PATH=/usr/local/lib/pkgconfig LD_LIBRARY_PATH=/usr/local/lib cmake -DCMAKE_INSTALL_PREFIX=/usr/OFX/Plugins ../openfx-arena
  - make -j2
  - sudo make install

# ubuntu-toolchain-r/test contains recent versions of gcc
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - ca-certificates
    - gcc-8
    - g++-8
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    #build_command_prepend: ./configure
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "make $J CONFIG=debug"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan
